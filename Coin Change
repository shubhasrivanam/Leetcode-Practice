
IN PYTHON:
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [0]
        for i in range (1, amount+1):
            dp.append(amount+1)
        for i in range(0, amount+1):
            for j in range(0, len(coins)):
            #as we should know the amount of money needed left over, we should subtract i(amount)-coins[j](the amount of the coin)
            #and add one as well(to indicate that one coin has been considered to create the i(amount)).
                if(i>=coins[j]):
                    dp[i] = min(dp[i], 1+dp[i-coins[j]])
        if(dp[amount]>amount):
            return -1
        else:
            return dp[amount]
            
IN JAVA:
class Solution {
    public int coinChange(int[] coins, int amount) {
        int dp[] = new int[amount+1];
        Arrays.fill(dp, amount+1);
        dp[0] = 0;
        for(int i = 0; i < dp.length; i++)
        {
            for(int j = 0; j < coins.length; j++)
            {
                if(i>=coins[j])
                {
                    dp[i] = Math.min(dp[i], 1 + dp[i - coins[j]]);
                }
            }
        }
        if(dp[amount]>amount)
            return -1;
        else
            return dp[amount];
    }
}
         
        
        
